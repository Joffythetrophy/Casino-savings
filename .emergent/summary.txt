<analysis>
The previous AI engineer successfully brought the Casino Savings dApp from conception to a highly functional, feature-rich application. Initial efforts focused on frontend replication and fixing critical UI loading issues (, WebSocket misconfiguration). Subsequently, comprehensive feature integration took place, including a sophisticated wallet manager with deposit/withdrawal, crypto conversion for CRT, DOGE, TRX, and USDC, and a unique smart savings logic. A major pivot involved removing all mock data and integrating real-time CoinGecko API for crypto prices and conversion rates. User authentication was implemented. The most significant recent feature is an internal, user-managed liquidity pool with automatic funding from savings and dynamic withdrawal/conversion limits, delivering a feel of real trading. The work ended with the user requesting full blockchain integration for DOGE and TRON, with the AI retrieving the TRON playbook.
</analysis>

<product_requirements>
The user requested a pixel-perfect clone of a casino savings dApp, integrating real Solana blockchain (CRT tokens), Dogecoin (DOGE), and Tron (TRX). Key requirements evolved to include:
1.  **Casino Gameplay**: Implement Keno, Plinko, Roulette, Dice, Mines, Slots with real betting and animations.
2.  **CRT Token Integration**: Prominent display and use of user-provided CRT token images.
3.  **Real Savings System**: Automatic savings of game losses into a savings vault with detailed transaction history, free of mock data.
4.  **Private User Experience**: Removal of public stats (players, wagers) for a private self-savings app.
5.  **Advanced Wallet Management**: Separate winnings and savings wallets, deposit/withdrawal, crypto conversion (CRT, DOGE, TRX, USDC), and smart savings logic (total session gains saved even if net loss).
6.  **Internal Liquidity Pool**: Ability to convert CRT to TRX (and other pairs) without external liquidity, funded by 10% of savings after each session, with dynamic withdrawal limits.
7.  **Real-Money Integration**: Transition from database-managed balances to real blockchain integration for DOGE and TRON.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture**: React (frontend), FastAPI (backend), MongoDB (database).
-   **Blockchain Concepts**: Solana, Dogecoin, Tron token management.
-   **UI/UX Framework**: Shadcn UI components.
-   **API Integration**: CoinGecko for real-time crypto prices,  library.
-   **Caching**: Redis for API rate limiting and performance.
-   **Authentication**: Custom user authentication and session management.
-   **Custom Business Logic**: Smart Savings and Internal Liquidity Pool mechanisms.
</key_technical_concepts>

<code_architecture>


-   ****: Main React file defining routes.
    -   **Summary**: Central router, integrating core components like Header, CasinoLobby, SavingsPage, WalletManager.
    -   **Changes**: Updated to include  route for  and  components. Wrapped the application with  to manage user sessions.
-   ****: Navigation bar.
    -   **Summary**: Provides navigation links to various sections of the application.
    -   **Changes**: Added Wallet link. Integrated authentication context to display user details (TestWal...) and a Logout button when authenticated. Fixed  context issue.
-   ****: Landing page hero.
    -   **Summary**: Displays initial branding and key message.
    -   **Changes**: Removed public stats to align with private app requirements.
-   ****: Casino games hub.
    -   **Summary**: Displays available casino games.
    -   **Changes**: Fixed Coins is not defined error by adding missing icon imports. Removed mock player counts and jackpot amounts, connecting to real backend APIs.
-   ****: Individual game components.
    -   **Summary**: UI and logic for each casino game.
    -   **Changes**: Removed mock data for player counts and jackpot amounts. Updated to connect to real backend for balances.
-   ****: User's savings dashboard.
    -   **Summary**: Displays user's savings data and transaction history.
    -   **Changes**: Updated to fetch and display real savings data from the backend, removing all mock data.
-   ****: Wallet management.
    -   **Summary**: Handles deposit, withdrawal, crypto conversion, and displays separate wallets (Deposit, Winnings, Savings).
    -   **Changes**: Significantly enhanced to include USDC support in all currency dropdowns, implemented QR code functionality for deposits with mock wallet addresses. Connected to real backend APIs for all wallet operations. Integrated Liquidity Pool tab and display withdrawal limits.
-   ** (New)**: Internal liquidity pool interface.
    -   **Summary**: Manages user's personal liquidity pool, displaying contributions and withdrawal limits.
    -   **Changes**: Created to handle the UI and interaction for the internal liquidity pool. Includes functions to fetch and display liquidity data.
-   ** (New)**: User authentication.
    -   **Summary**: Provides UI for user registration and login.
    -   **Changes**: Created to manage user authentication, including demo wallet generation and session handling.
-   ****: Frontend environment variables.
    -   **Summary**: Stores configuration for the frontend, including the backend URL.
    -   **Changes**:  was added and then removed to fix WebSocket connection issues for hot reloading.
-   ****: Main FastAPI backend.
    -   **Summary**: Handles API routes, database connections, and business logic.
    -   **Changes**: Expanded to include endpoints for authentication, real-time crypto conversion (CoinGecko integration), Redis caching, and liquidity pool management. Updated wallet, deposit, withdrawal, and conversion endpoints to be authenticated and interact with the new liquidity pool logic, ensuring correct MongoDB operations (UUIDs instead of ObjectIDs). Added a temporary test endpoint for adding savings balances.
-   ****: Python dependencies for backend.
    -   **Summary**: Lists all Python libraries required for the backend.
    -   **Changes**: Added ,  and related packages for crypto price integration and caching.
-   ****: API contracts documentation.
    -   **Summary**: Documents API contracts and backend implementation details.
    -   **Changes**: Maintained as a living document of integration details.
</code_architecture>

<pending_tasks>
-   Implement real blockchain integration for DOGE using its playbook.
-   Implement real blockchain integration for TRON using its playbook.
-   Integrate CRT token (Solana) with real blockchain.
-   Obtain and integrate necessary API keys (CoinGecko, Solana RPC, DOGE wallet API, TRON API) from the user.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was working on fully integrating real blockchain capabilities into the application following the user's explicit request to make DOGE and TRON transactions real money.

The AI engineer had just completed the following:
1.  **Backend Fixes for Balance Display**: Resolved a series of backend issues, including  authentication errors on wallet endpoints,  with MongoDB, and . This involved updating  to correctly handle authentication for wallet, deposit, withdrawal, and conversion endpoints, ensuring proper session management.
2.  **Frontend Authentication Context Fix**: Corrected a React Router context issue where the authentication state was not persisting across direct route access (e.g., navigating directly to ), which prevented the balance from displaying. This was implicitly resolved by ensuring the  correctly reads and maintains the user session.
3.  **Liquidity Pool System Implementation**: A sophisticated internal liquidity pool was implemented.
    *   **Backend ()**: Added logic for liquidity pool management, integrating it with conversion and withdrawal functions. This system automatically allocates 10% of user savings to the liquidity pool after each session.
    *   **Frontend (, )**: New components and UI elements were created to display the liquidity pool, its value, and dynamically adjust withdrawal limits based on available liquidity. The conversion interface was updated to acknowledge and utilize these limits, providing a feel for trading even without external liquidity.
4.  **Verification**: The AI successfully demonstrated:
    *   Successful user registration, login, and session persistence.
    *   Correct display of deposited CRT balance (100.5000 CRT) in the Wallet Manager.
    *   Automatic contribution of savings to the liquidity pool.
    *   Currency conversion within the liquidity limits (e.g., 1 CRT to 9.8 TRX).
    *   Enforcement of withdrawal limits based on liquidity, providing user feedback for exceeding limits.

The system is now robustly handling internal real money transactions (database-backed for now) with an active real-time crypto price feed and an internal liquidity exchange.

The very last action in the trajectory was the user explicitly requesting to make DOGE and TRON fully real with blockchain integration, and the AI engineer has just successfully retrieved the TRON integration playbook.
</current_work>

<optional_next_step>
Get the DOGE integration playbook and then implement real blockchain integration for TRON and DOGE.
</optional_next_step>
